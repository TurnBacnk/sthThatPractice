抽象类语法
    [修饰符列表] abstract class 类名
        {
            类体;
        }
抽象类中不一定有抽象方法，抽象方法只能存在与抽象类中
abstract class Animal{}
class Bird extends Animal(){}
public class 123
{
    public static void main(String[] args)
    {
        //此处为多态使用方法，Bird向上转型，编译时认为是animal中的方法，实际上是bird中的方法
        Animal a1 = new Bird();
        a.xxx();
    }
}

接口也是一种引用数据类型
接口是完全抽象的（抽象类是半抽象的），亦即接口是特殊的抽象类
接口语法：
    [修饰符列表] interface 接口名(){}
接口可以继承多个接口，即支持多继承
接口中只有两部分，一个是常量，一个是抽象方法
接口中所有的元素都是public修饰的
接口中抽象方法定义时，public abstract可以省略，常量的public static final也可以省略
接口中的方法不可以有方法体
接口的基础语法：
    1、类和类之间叫做继承（extends），类和接口之间叫做实现（implements），两者之间可以共存
    2、当一个非抽象的类，实现接口的时候，必须将接口中的所有方法重写
    3、一个类可以同时实现多个接口
接口在开发中的作用：
抽象类和接口的区别：
        1、抽象类半抽象，接口完全抽象
        2、抽象类中构造方法，接口中没有构造方法
        3、接口和接口之间支持多继承，类和类之间只能单继承
        4、一个类能同时实现多个接口，一个抽象类只能继承一个类
        5、接口只允许出现常量和抽象方法
关于java中的package和import机制
    为什么要使用package？
        方便程序管理，不同功能的类放在不同的包下
    使用方法：
        package是一个关键字，后面加包名
